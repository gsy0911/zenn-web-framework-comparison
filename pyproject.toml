[project]
name = "zenn-web-framework-comparison"
version = "0.1.0"
description = "Add your description here"
authors = [
    { name = "gsy0911", email = "yoshiki0911@gmail.com" }
]
dependencies = []
readme = "README.md"
requires-python = ">= 3.10"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.rye]
managed = true
dev-dependencies = [
    "locust>=2.32.6",
]
virtual = true

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/zenn_web_framework_comparison"]

[tool.rye.workspace]
members = ["python/fastapi", "python/flask"]


[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
target-version = "py310"
line-length = 120


# see: https://docs.astral.sh/ruff/rules/
[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "G004", # `logging-f-string` : loggingでf-stringを使いたいので無視する
    "RUF001", # 全角記号など`ambiguous unicode character`も使いたいため
    "RUF002", # 全角記号など`ambiguous unicode character`も使いたいため
    "RUF003", # 全角記号など`ambiguous unicode character`も使いたいため
    "PLC1901", # compare-to-empty-string : `if a == "`のように空文字列で直接比較したいときがあるため
    "PLR2004", # magic-value-comparison: listのサイズで判定するときがよくあるため
    "ANN101", # missing-type-self: 引数selfには型ヒントは付けていないため
    "ANN102", # missing-type-cls: 引数clsには型ヒントは付けていないため
    "ANN002", # missing-type-args
    "ANN003", # missing-type-kwargs
    "ERA", # : 役立つこともあるが、コメントアウトしていないコードも警告されるので無視する

    # いずれ無視しないようにする
    "PLR", # pylint Refactor

    # 以下のルールはannofabcliのコードに合っていないので無効化した
    "RSE", # flake8-raise
    "D", # pydocstyle, Docstringを中途半端にしか書いていないので、除外する
    "T20", # flake8-print
    "SLF", # flake8-self
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "TRY", # tryceratops
    "COM", # flake8-commas
    "S", # flake8-bandit
    "EM", # flake8-errmsg
    "EXE", # flake8-executable
    "ICN", # flake8-import-conventions
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # pathlibを使わないコードが多いので、除外する
    "ISC", # flake8-implicit-str-concat
    "PT", # flake8-pytest-style
    "INP", # flake8-no-pep420 __init__.pyを必須にする
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"


[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false
# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"


[tool.rye.scripts]
format = { chain = ["ruff format", "ruff check --fix"] }

